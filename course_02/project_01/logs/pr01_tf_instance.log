ntoniosalazary@ip-172-31-21-250:~/tf_project$ cat creds.tf 
# Configure the AWS Provider
provider "aws" {
  access_key = "ASIA6RJVA5HB4P56P3JD"
  secret_key = "Kkocb/aNEROHlbrGrqHwveDr1EZXvDwL8RKnqu8S"
  token = "FwoGZXIvYXdzEPz//////////wEaDCeIpOsVk5va3s1yfSK6AYEaBkwUbxlRmrM2gd4Mslhj73Eun9Rykp05J1diPNUw8IskadyLdfuWkQwjFmJhedKm9OyoR1YcN3hfBzamRGdwKIw0QAQ01dRl//ODw53vaUceW51JNs0jWHqsxowppi/1uRmMNkfiuom1oB/5UdjbcSnIrJI7LRvMb1fnDqUij2iQ/ZZzdKg1eSbZJCOnf0BOAsh0fGTwDQn2KBZFBhYZGT04t8yKf8GkM6uosdmP5PSygNQWQmrSTCjHz/CVBjItKB7bl/iAp3kC/qrrBQ2oaaze3ncvJPgu02N0+m5ZhDKD/qcxXaX2M5nh1QHt"
  region = "us-east-1"
}
antoniosalazary@ip-172-31-21-250:~/tf_project$ cat main.tf
# Create a Security Group
resource "aws_security_group" "tf_sg" {
  name = "tf_sg"
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Create Key Pair
resource "aws_key_pair" "tf_kp" {
  key_name   = "tf_kp"
  public_key = tls_private_key.rsa.public_key_openssh
}

# Choose RSA algorithm for the private key 
resource "tls_private_key" "rsa" {
  algorithm = "RSA"
  rsa_bits = 4096
}

# Create private key
resource "local_file" "tf_pk_pem" {
  content  = tls_private_key.rsa.private_key_pem
  filename = "tf_kp.pem"
}

provider random {}

resource "random_pet" "name" {}

# Create a new Linux Ubuntu EC2 Instance
resource "aws_instance" "ubuntu_00" {
  ami = "ami-09e67e426f25ce0d7"
  instance_type = "t2.micro"
  security_groups = [aws_security_group.tf_sg.name]
  key_name = "tf_kp"
  tags = {
    Name = random_pet.name.id
  }
}
antoniosalazary@ip-172-31-21-250:~/tf_project$ sudo terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/random from the dependency lock file
- Reusing previous version of hashicorp/aws from the dependency lock file
- Reusing previous version of hashicorp/tls from the dependency lock file
- Reusing previous version of hashicorp/local from the dependency lock file
- Using previously-installed hashicorp/random v3.3.2
- Using previously-installed hashicorp/aws v4.19.0
- Using previously-installed hashicorp/tls v3.4.0
- Using previously-installed hashicorp/local v2.2.3

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
antoniosalazary@ip-172-31-21-250:~/tf_project$ sudo terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.ubuntu_00 will be created
  + resource "aws_instance" "ubuntu_00" {
      + ami                                  = "ami-09e67e426f25ce0d7"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "tf_kp"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = [
          + "tf_sg",
        ]
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = (known after apply)
      + tags_all                             = (known after apply)
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_key_pair.tf_kp will be created
  + resource "aws_key_pair" "tf_kp" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "tf_kp"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + public_key      = (known after apply)
      + tags_all        = (known after apply)
    }

  # aws_security_group.tf_sg will be created
  + resource "aws_security_group" "tf_sg" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "tf_sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # local_file.tf_pk_pem will be created
  + resource "local_file" "tf_pk_pem" {
      + content              = (sensitive)
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "tf_kp.pem"
      + id                   = (known after apply)
    }

  # random_pet.name will be created
  + resource "random_pet" "name" {
      + id        = (known after apply)
      + length    = 2
      + separator = "-"
    }

  # tls_private_key.rsa will be created
  + resource "tls_private_key" "rsa" {
      + algorithm                     = "RSA"
      + ecdsa_curve                   = "P224"
      + id                            = (known after apply)
      + private_key_openssh           = (sensitive value)
      + private_key_pem               = (sensitive value)
      + public_key_fingerprint_md5    = (known after apply)
      + public_key_fingerprint_sha256 = (known after apply)
      + public_key_openssh            = (known after apply)
      + public_key_pem                = (known after apply)
      + rsa_bits                      = 4096
    }

Plan: 6 to add, 0 to change, 0 to destroy.

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
antoniosalazary@ip-172-31-21-250:~/tf_project$ terraform apply
╷
│ Error: Error acquiring the state lock
│ 
│ Error message: open terraform.tfstate: permission denied
│ 
│ Terraform acquires a state lock to protect the state from being written
│ by multiple users at the same time. Please resolve the issue above and try
│ again. For most commands, you can disable locking with the "-lock=false"
│ flag, but this is not recommended.
╵
antoniosalazary@ip-172-31-21-250:~/tf_project$ sudo terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.ubuntu_00 will be created
  + resource "aws_instance" "ubuntu_00" {
      + ami                                  = "ami-09e67e426f25ce0d7"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "tf_kp"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = [
          + "tf_sg",
        ]
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = (known after apply)
      + tags_all                             = (known after apply)
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_key_pair.tf_kp will be created
  + resource "aws_key_pair" "tf_kp" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "tf_kp"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + public_key      = (known after apply)
      + tags_all        = (known after apply)
    }

  # aws_security_group.tf_sg will be created
  + resource "aws_security_group" "tf_sg" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "tf_sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # local_file.tf_pk_pem will be created
  + resource "local_file" "tf_pk_pem" {
      + content              = (sensitive)
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "tf_kp.pem"
      + id                   = (known after apply)
    }

  # random_pet.name will be created
  + resource "random_pet" "name" {
      + id        = (known after apply)
      + length    = 2
      + separator = "-"
    }

  # tls_private_key.rsa will be created
  + resource "tls_private_key" "rsa" {
      + algorithm                     = "RSA"
      + ecdsa_curve                   = "P224"
      + id                            = (known after apply)
      + private_key_openssh           = (sensitive value)
      + private_key_pem               = (sensitive value)
      + public_key_fingerprint_md5    = (known after apply)
      + public_key_fingerprint_sha256 = (known after apply)
      + public_key_openssh            = (known after apply)
      + public_key_pem                = (known after apply)
      + rsa_bits                      = 4096
    }

Plan: 6 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

tls_private_key.rsa: Creating...
random_pet.name: Creating...
random_pet.name: Creation complete after 0s [id=close-gobbler]
aws_security_group.tf_sg: Creating...
tls_private_key.rsa: Creation complete after 0s [id=15f00307e02b22dd8b347458fdad418dbb146534]
local_file.tf_pk_pem: Creating...
aws_key_pair.tf_kp: Creating...
local_file.tf_pk_pem: Creation complete after 0s [id=c72f23c253bb918523086c59a037e1b9cdc5b821]
aws_key_pair.tf_kp: Creation complete after 1s [id=tf_kp]
aws_security_group.tf_sg: Creation complete after 2s [id=sg-0ef993f33eb918adb]
aws_instance.ubuntu_00: Creating...
aws_instance.ubuntu_00: Still creating... [10s elapsed]
aws_instance.ubuntu_00: Still creating... [20s elapsed]
aws_instance.ubuntu_00: Still creating... [30s elapsed]
aws_instance.ubuntu_00: Creation complete after 32s [id=i-0c0b0695411559594]

Apply complete! Resources: 6 added, 0 changed, 0 destroyed.
antoniosalazary@ip-172-31-21-250:~/tf_project$ ls -l
total 40
-rw-rw-r-- 1 antoniosalazary antoniosalazary   548 Jun 29 13:09 creds.tf
-rw-rw-r-- 1 antoniosalazary antoniosalazary  1010 Jun 29 11:00 main.tf
-rw-r--r-- 1 root            root            21331 Jun 29 13:52 terraform.tfstate
-rw-r--r-- 1 root            root              156 Jun 29 13:52 terraform.tfstate.backup
-rwxr-xr-x 1 root            root             3243 Jun 29 13:52 tf_kp.pem
antoniosalazary@ip-172-31-21-250:~/tf_project$ ssh -i "tf_kp.pem" ubuntu@ec2-44-203-174-123.compute-1.amazonaws.com
The authenticity of host 'ec2-44-203-174-123.compute-1.amazonaws.com (44.203.174.123)' can't be established.
ECDSA key fingerprint is SHA256:wx8Rd0dhdBllb+9/E+86FHQAjwqxfehG6flKYVPN3eQ.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added 'ec2-44-203-174-123.compute-1.amazonaws.com,44.203.174.123' (ECDSA) to the list of known hosts.
Welcome to Ubuntu 20.04.2 LTS (GNU/Linux 5.4.0-1045-aws x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Wed Jun 29 13:59:37 UTC 2022

  System load:  0.0               Processes:             100
  Usage of /:   16.4% of 7.69GB   Users logged in:       0
  Memory usage: 22%               IPv4 address for eth0: 172.31.93.17
  Swap usage:   0%

1 update can be applied immediately.
To see these additional updates run: apt list --upgradable


The list of available updates is more than a week old.
To check for new updates run: sudo apt update


The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.

To run a command as administrator (user "root"), use "sudo <command>".
See "man sudo_root" for details.

ubuntu@ip-172-31-93-17:~$ sudo cat /etc/os-release
NAME="Ubuntu"
VERSION="20.04.2 LTS (Focal Fossa)"
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME="Ubuntu 20.04.2 LTS"
VERSION_ID="20.04"
HOME_URL="https://www.ubuntu.com/"
SUPPORT_URL="https://help.ubuntu.com/"
BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"
PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"
VERSION_CODENAME=focal
UBUNTU_CODENAME=focal
ubuntu@ip-172-31-93-17:~$ exit
logout
Connection to ec2-44-203-174-123.compute-1.amazonaws.com closed.
antoniosalazary@ip-172-31-21-250:~/tf_project$ sudo cat /etc/os-release
NAME="Ubuntu"
VERSION="20.04.3 LTS (Focal Fossa)"
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME="Ubuntu 20.04.3 LTS"
VERSION_ID="20.04"
HOME_URL="https://www.ubuntu.com/"
SUPPORT_URL="https://help.ubuntu.com/"
BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"
PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"
VERSION_CODENAME=focal
UBUNTU_CODENAME=focal
antoniosalazary@ip-172-31-21-250:~/tf_project$ sudo terraform destroy
tls_private_key.rsa: Refreshing state... [id=15f00307e02b22dd8b347458fdad418dbb146534]
random_pet.name: Refreshing state... [id=close-gobbler]
local_file.tf_pk_pem: Refreshing state... [id=c72f23c253bb918523086c59a037e1b9cdc5b821]
aws_key_pair.tf_kp: Refreshing state... [id=tf_kp]
aws_security_group.tf_sg: Refreshing state... [id=sg-0ef993f33eb918adb]
aws_instance.ubuntu_00: Refreshing state... [id=i-0c0b0695411559594]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_instance.ubuntu_00 will be destroyed
  - resource "aws_instance" "ubuntu_00" {
      - ami                                  = "ami-09e67e426f25ce0d7" -> null
      - arn                                  = "arn:aws:ec2:us-east-1:999227976131:instance/i-0c0b0695411559594" -> null
      - associate_public_ip_address          = true -> null
      - availability_zone                    = "us-east-1a" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 1 -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - id                                   = "i-0c0b0695411559594" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t2.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - key_name                             = "tf_kp" -> null
      - monitoring                           = false -> null
      - primary_network_interface_id         = "eni-02328d5b9cebca225" -> null
      - private_dns                          = "ip-172-31-93-17.ec2.internal" -> null
      - private_ip                           = "172.31.93.17" -> null
      - public_dns                           = "ec2-44-203-174-123.compute-1.amazonaws.com" -> null
      - public_ip                            = "44.203.174.123" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [
          - "tf_sg",
        ] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-0b9b1a4db9cf5a785" -> null
      - tags                                 = {
          - "Name" = "close-gobbler"
        } -> null
      - tags_all                             = {
          - "Name" = "close-gobbler"
        } -> null
      - tenancy                              = "default" -> null
      - user_data_replace_on_change          = false -> null
      - vpc_security_group_ids               = [
          - "sg-0ef993f33eb918adb",
        ] -> null

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - maintenance_options {
          - auto_recovery = "default" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_put_response_hop_limit = 1 -> null
          - http_tokens                 = "optional" -> null
          - instance_metadata_tags      = "disabled" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/sda1" -> null
          - encrypted             = false -> null
          - iops                  = 100 -> null
          - tags                  = {} -> null
          - throughput            = 0 -> null
          - volume_id             = "vol-0ed40a1282d65130e" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp2" -> null
        }
    }

  # aws_key_pair.tf_kp will be destroyed
  - resource "aws_key_pair" "tf_kp" {
      - arn         = "arn:aws:ec2:us-east-1:999227976131:key-pair/tf_kp" -> null
      - fingerprint = "1a:97:e7:ec:8e:bc:1d:4f:de:5f:ec:1a:d9:05:a9:a7" -> null
      - id          = "tf_kp" -> null
      - key_name    = "tf_kp" -> null
      - key_pair_id = "key-09d97db6b90cb7e6b" -> null
      - public_key  = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCiy8wLpVzSDGhZIz0nbWqKbFGWEaXQ+I6gmWcAaVE2wcCIF4IkCCaQhNxecD3s6zLlWYTNPAz33RipgWk7V0QEpKcWkPw6AzvIstv/MuR1cYMGcupxFwy5CpI8GGDvbLQU9QsKmEHMMwJ2KLd6tFc+rGMGrq72JVSvhXlo/LYGfmerV65o3YLy+R0n0Z7DoRv92X63IWt/RoQpCEGHFvB5MKEDr5raMhI20rgmRh4qW9H05E8VmxylJ4HOyKNfSWGt0r4apHMXopnjnebKpacTfgjB6fvadrcnHYAFbB/FmyLuFdNnEqFJrMQHcv51zm0ImlFUPH8C4MoSc7j0Fb6eISLDY9Rj2P844zA/dHxeuruSvobjkoLqVa+aaU/gSqW4w4czWVeV5aeqe/9OGvAJEymZtG77+YYinrBz4lv8hRWHNchBnbFZEG7zbCXXBIj5KmlBH4ILROkmQEiLSunNPw5raW8xHDvTgF3P0B25+bcKZiAHgZow8mvj+Fkv8qqOXTWQyev1TftgzPFB/6EwC/mwaE2FUQ+mMtT1VKWt37mWEJvLAwi+ctGxxo/Sfo+vZ2Yl1dJPctf3Q8YK+IExzBWoQTAHGtTGqhm8yP5iWowHoj/mMAv6j7ap10DoC56zhVBlb7XsEJsxnV0HR7itkIza0kvkIm3bSifvC8nU3w==" -> null
      - tags        = {} -> null
      - tags_all    = {} -> null
    }

  # aws_security_group.tf_sg will be destroyed
  - resource "aws_security_group" "tf_sg" {
      - arn                    = "arn:aws:ec2:us-east-1:999227976131:security-group/sg-0ef993f33eb918adb" -> null
      - description            = "Managed by Terraform" -> null
      - egress                 = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = ""
              - from_port        = 0
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "-1"
              - security_groups  = []
              - self             = false
              - to_port          = 0
            },
        ] -> null
      - id                     = "sg-0ef993f33eb918adb" -> null
      - ingress                = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = ""
              - from_port        = 22
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = []
              - self             = false
              - to_port          = 22
            },
        ] -> null
      - name                   = "tf_sg" -> null
      - owner_id               = "999227976131" -> null
      - revoke_rules_on_delete = false -> null
      - tags                   = {} -> null
      - tags_all               = {} -> null
      - vpc_id                 = "vpc-09cccba2b6c642b60" -> null
    }

  # local_file.tf_pk_pem will be destroyed
  - resource "local_file" "tf_pk_pem" {
      - content              = (sensitive) -> null
      - directory_permission = "0777" -> null
      - file_permission      = "0777" -> null
      - filename             = "tf_kp.pem" -> null
      - id                   = "c72f23c253bb918523086c59a037e1b9cdc5b821" -> null
    }

  # random_pet.name will be destroyed
  - resource "random_pet" "name" {
      - id        = "close-gobbler" -> null
      - length    = 2 -> null
      - separator = "-" -> null
    }

  # tls_private_key.rsa will be destroyed
  - resource "tls_private_key" "rsa" {
      - algorithm                     = "RSA" -> null
      - ecdsa_curve                   = "P224" -> null
      - id                            = "15f00307e02b22dd8b347458fdad418dbb146534" -> null
      - private_key_openssh           = (sensitive value)
      - private_key_pem               = (sensitive value)
      - public_key_fingerprint_md5    = "36:c7:b2:f5:d6:fd:13:77:e2:69:02:99:2e:0a:16:cf" -> null
      - public_key_fingerprint_sha256 = "SHA256:gWvc8OnFBh3m9DZxuDzz/a3sC1p0oLjGbn2/nX6M7aU" -> null
      - public_key_openssh            = <<-EOT
            ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCiy8wLpVzSDGhZIz0nbWqKbFGWEaXQ+I6gmWcAaVE2wcCIF4IkCCaQhNxecD3s6zLlWYTNPAz33RipgWk7V0QEpKcWkPw6AzvIstv/MuR1cYMGcupxFwy5CpI8GGDvbLQU9QsKmEHMMwJ2KLd6tFc+rGMGrq72JVSvhXlo/LYGfmerV65o3YLy+R0n0Z7DoRv92X63IWt/RoQpCEGHFvB5MKEDr5raMhI20rgmRh4qW9H05E8VmxylJ4HOyKNfSWGt0r4apHMXopnjnebKpacTfgjB6fvadrcnHYAFbB/FmyLuFdNnEqFJrMQHcv51zm0ImlFUPH8C4MoSc7j0Fb6eISLDY9Rj2P844zA/dHxeuruSvobjkoLqVa+aaU/gSqW4w4czWVeV5aeqe/9OGvAJEymZtG77+YYinrBz4lv8hRWHNchBnbFZEG7zbCXXBIj5KmlBH4ILROkmQEiLSunNPw5raW8xHDvTgF3P0B25+bcKZiAHgZow8mvj+Fkv8qqOXTWQyev1TftgzPFB/6EwC/mwaE2FUQ+mMtT1VKWt37mWEJvLAwi+ctGxxo/Sfo+vZ2Yl1dJPctf3Q8YK+IExzBWoQTAHGtTGqhm8yP5iWowHoj/mMAv6j7ap10DoC56zhVBlb7XsEJsxnV0HR7itkIza0kvkIm3bSifvC8nU3w==
        EOT -> null
      - public_key_pem                = <<-EOT
            -----BEGIN PUBLIC KEY-----
            MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAosvMC6Vc0gxoWSM9J21q
            imxRlhGl0PiOoJlnAGlRNsHAiBeCJAgmkITcXnA97Osy5VmEzTwM990YqYFpO1dE
            BKSnFpD8OgM7yLLb/zLkdXGDBnLqcRcMuQqSPBhg72y0FPULCphBzDMCdii3erRX
            PqxjBq6u9iVUr4V5aPy2Bn5nq1euaN2C8vkdJ9Gew6Eb/dl+tyFrf0aEKQhBhxbw
            eTChA6+a2jISNtK4JkYeKlvR9ORPFZscpSeBzsijX0lhrdK+GqRzF6KZ453myqWn
            E34Iwen72na3Jx2ABWwfxZsi7hXTZxKhSazEB3L+dc5tCJpRVDx/AuDKEnO49BW+
            niEiw2PUY9j/OOMwP3R8Xrq7kr6G45KC6lWvmmlP4EqluMOHM1lXleWnqnv/Thrw
            CRMpmbRu+/mGIp6wc+Jb/IUVhzXIQZ2xWRBu82wl1wSI+SppQR+CC0TpJkBIi0rp
            zT8Oa2lvMRw704Bdz9Adufm3CmYgB4GaMPJr4/hZL/Kqjl01kMnr9U37YMzxQf+h
            MAv5sGhNhVEPpjLU9VSlrd+5lhCbywMIvnLRscaP0n6Pr2dmJdXST3LX90PGCviB
            McwVqEEwBxrUxqoZvMj+YlqMB6I/5jAL+o+2qddA6Aues4VQZW+17BCbMZ1dB0e4
            rZCM2tJL5CJt20on7wvJ1N8CAwEAAQ==
            -----END PUBLIC KEY-----
        EOT -> null
      - rsa_bits                      = 4096 -> null
    }

Plan: 0 to add, 0 to change, 6 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

local_file.tf_pk_pem: Destroying... [id=c72f23c253bb918523086c59a037e1b9cdc5b821]
local_file.tf_pk_pem: Destruction complete after 0s
aws_key_pair.tf_kp: Destroying... [id=tf_kp]
aws_instance.ubuntu_00: Destroying... [id=i-0c0b0695411559594]
aws_key_pair.tf_kp: Destruction complete after 1s
tls_private_key.rsa: Destroying... [id=15f00307e02b22dd8b347458fdad418dbb146534]
tls_private_key.rsa: Destruction complete after 0s
aws_instance.ubuntu_00: Still destroying... [id=i-0c0b0695411559594, 10s elapsed]
aws_instance.ubuntu_00: Still destroying... [id=i-0c0b0695411559594, 20s elapsed]
aws_instance.ubuntu_00: Destruction complete after 30s
random_pet.name: Destroying... [id=close-gobbler]
aws_security_group.tf_sg: Destroying... [id=sg-0ef993f33eb918adb]
random_pet.name: Destruction complete after 0s
aws_security_group.tf_sg: Destruction complete after 1s

Destroy complete! Resources: 6 destroyed.
antoniosalazary@ip-172-31-21-250:~/tf_project$ 
