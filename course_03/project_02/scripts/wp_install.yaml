# Name:        wp_install.yaml
# Description: install WordPress server 
# Author:      Antonio Salazar (antonio.salazar@ymail.com)
# Date:        2022-04-30
---
  - name: Setup the WordPress Server on {{ server }} host
    hosts: "{{ server }}"
    gather_facts: yes
    vars_files: ~/scripts/wp_vars.yaml 
    vars:
      ansible_become: yes 
      ansible_become_method: sudo
      ansible_become_pass: "{{ build_password }}"

    tasks:
      - name: Install Apache Web Server package on Debian OS family
        apt: name=apache2 state=present update_cache=yes
        when: ansible_os_family=="Debian"

      - name: Install Apache Web Server package on RHEL OS family
        yum:  name=httpd state=present
        when: ansible_os_family=="RedHat"

      - name: Install PHP packages on Debian OS family 
        apt: name={{ item }} update_cache=yes state=latest
        loop:
          - libapache2-mod-php 
          - php
          - php-common
          - php-mysql
          - php-tidy
          - php-xml
          - php-xmlrpc
          - php-mbstring
          - php-memcached
          - php-curl
          - php-zip
          - php-pear 
          - php-cgi 
          - php-net-socket 
          - php-gd 
          - php-xml-util 
          - php-php-gettext 
          - php-bcmath 
          - unzip 
          - wget 
          - git 
          - python3
          - python3-pip
          - python3-mysqldb
        when: ansible_os_family=="Debian"

      - name: Install PHP packages on RHEL OS family 
        yum: name={{ item }} state=latest
        loop:
          - libapache2-mod-php 
          - php
          - php-common
          - php-mysql
          - php-tidy
          - php-xml
          - php-xmlrpc
          - php-mbstring
          - php-memcached
          - php-curl
          - php-zip
          - php-pear 
          - php-cgi 
          - php-net-socket 
          - php-gd 
          - php-xml-util 
          - php-php-gettext 
          - php-bcmath 
          - unzip 
          - wget 
          - git 
          - python3
          - python3-pip
          - python3-mysqldb
        when: ansible_os_family=="RedHat"

      - name: Install PyMySQL package
        pip: 
          name: pymysql 
          state: present

      - name: Setup MariaDB repository 
        shell: curl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | bash warn=False    

      - name: Install MariaDB latest on Debian OS family
        apt: name={{ item }} update_cache=yes state=latest
        loop:
          - mariadb-server
          - mariadb-client
        when: ansible_os_family=="Debian"

      - name: Install MariaDB latest RHEL OS family
        yum: name={{ item }} state=latest
        loop:
          - mariadb-server
          - mariadb-client
        when: ansible_os_family=="RedHat"

      - name: Restart MariaDB service
        service: 
          name: mysql 
          state: restarted

      - name: Verify if /home/{{ build_username }}/scripts if exists
        stat:
          path: "/home/{{ build_username }}/scripts"
        register: stat_result

      - name: Create /home/{{ build_username }}/scripts if does not exist
        file: 
          path: "/home/{{ build_username }}/scripts"
          state: directory
        when: stat_result.stat.exists == False

      - name: Setup the mysql_secure_installation.sql DB init script 
        copy:
          dest: "/home/{{ build_username }}/scripts/mysql_secure_installation.sql"
          remote_src: yes
          content: |
            # Make sure that NOBODY can access the server without a password
            ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ root_passwd }}';
            # Kill the anonymous users
            DELETE FROM mysql.user WHERE User='';
            # disallow remote login for root
            DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
            # Kill off the demo database
            DROP DATABASE IF EXISTS test;
            DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
            # Make our changes take effect
            FLUSH PRIVILEGES;
            exit

      - name: Execute the mysql_secure_installation.sql DB init script 
        shell: |
          mysql -uroot -p"{{ root_passwd }}" --connect-expired-password < /home/{{ build_username }}/scripts/mysql_secure_installation.sql;
        args:
          executable: /bin/bash

      - name: Setup the mysql_create_db.sql DB script 
        copy:
          dest: "/home/{{ build_username }}/scripts/mysql_create_db.sql"
          remote_src: yes
          content: |
            CREATE DATABASE {{ db_name }};
            GRANT ALL PRIVILEGES ON {{ db_name }}.* to '{{ db_user }}'@localhost identified by '{{ db_passwd }}';
            SHOW DATABASES;
            FLUSH PRIVILEGES;
            exit
            EOF
            
      - name: Execute the mysql_create_db.sql DB script 
        shell: |
          mysql -uroot -p"{{ root_passwd }}" < /home/{{ build_username }}/scripts/mysql_create_db.sql;
        args:
          executable: /bin/bash

      - name: Concantenate the install and directory into 'path' single variable
        set_fact:
          path: "{{ install_path }}/{{ app_name }}"
 
      - name: Ensure that installation directory {{ path }} exists
        file: 
          path: "{{ path }}"
          state: directory
       
      - name: Install WordPress when {{ path }}/wordpress/index.php is not found
        stat:
          path: "{{ path }}/wordpress/index.php"
        register: stat_result

      - name: Download WordPress to {{ path }}
        shell: |
          cd {{ path }}
          wget https://wordpress.org/latest.zip
          unzip latest.zip
        args:
          executable: /bin/bash
        when: stat_result.stat.exists == False

      - name: Remove {{ path }}/latest.zip   
        file: 
          path: "{{ path }}/latest.zip"
          state: absent
        when: stat_result.stat.exists == False
 
      - name: Copy WordPress {{ path }}/wordpress/wp-config-sample.php file to {{ path }}/wordpress/wp-config.php
        copy: 
          src: "{{ path }}/wordpress/wp-config-sample.php"
          dest: "{{ path }}/wordpress/wp-config.php"
          remote_src: yes
          owner: www-data 
          group: www-data 

      - name: Ensure {{ path }}/wordpress/wp-config.php exists
        stat:
          path: "{{ path }}/wordpress/wp-config.php"
        register: stat_result
        when: stat_result.stat.exists == True

      - name: Set up the DB {{ db_name }} name on {{ path }}/wordpress/wp-config.php
        replace:
          path: "{{ path }}/wordpress/wp-config.php"
          regexp: 'database\_name\_here'
          replace: "{{ db_name }}"
          backup: yes

      - name: Set up the DB {{ db_user }} user on {{ path }}/wordpress/wp-config.php
        replace:
          path: "{{ path }}/wordpress/wp-config.php"
          regexp: 'username\_here'
          replace: "{{ db_user }}"
          backup: yes

      - name: Finish the DB set up
        replace:
          path: "{{ path }}/wordpress/wp-config.php"
          regexp: 'password\_here'
          replace: "{{ db_passwd }}"
          backup: yes

      - name: Change ownership of installation directory
        file: 
          path: "{{ path }}"
          owner: www-data 
          group: www-data 
          state: directory 
          recurse: yes 
          setype: httpd_sys_content_t
...
